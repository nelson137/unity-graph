#define PI 3.14159265358979323846

uint _Resolution;

RWStructuredBuffer<float3> _Positions;

float _Step, _Time, _TransitionProgress;

/*************************************************
 * Utilities
 ************************************************/

float2 GetUV(uint3 id)
{
    return (id.xy + 0.5) * _Step - 1.0;
}

void SetPosition(uint3 id, float3 pos)
{
    if (id.x < _Resolution && id.y < _Resolution)
    {
        _Positions[_Resolution * id.y + id.x] = pos;
    }
}

float DotProd(float3 v1, float v2x, float v2y, float v2z)
{
    return (v1.x * v2x) + (v1.y * v2y) + (v1.z * v2z);
}

float Lerp(float a, float b, float t)
{
    return (1.0 - t) * a + t * b;
}

float Fade(float x)
{
    return x * x * x * (x * (6.0 * x - 15.0) + 10.0);
}

int FastFloor(float x)
{
    return x > 0.0 ? (int)x : (int)(x - 1.0);
}

/*************************************************
 * Function Implementations
 ************************************************/

float3 SineWave(float u, float v, float t)
{
    float3 p;
    p.x = u;
    p.y = sin(PI * (u + v + t));
    p.z = v;
    return p;
}

float3 MultiSineWave(float u, float v, float t)
{
    float3 p;
    p.x = u;
    p.y = sin(PI * (u + 0.5 * t));
    p.y += 0.5 * sin(2 * PI * (v + t));
    p.y += sin(PI * (u + v + 0.25 * t));
    p.y *= 1 / 2.5;
    p.z = v;
    return p;
}

static const int _NoisePerm[] =
{
    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180, 151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180
};

static const float3 _NoiseGrad3[] = 
{
    float3( 1,  1,  0),
    float3(-1,  1,  0),
    float3( 1, -1,  0),
    float3(-1, -1,  0),
    float3( 1,  0,  1),
    float3(-1,  0,  1),
    float3( 1,  0, -1),
    float3(-1,  0, -1),
    float3( 0,  1,  1),
    float3( 0, -1,  1),
    float3( 0,  1, -1),
    float3( 0, -1, -1),
};

// Port of `class ClassicNoise` from Stefan Gustavson's Java
// [implementation, p. 8](https://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf)
//
// TODO: Investigate [this c++ implementation](https://www.scratchapixel.com/lessons/procedural-generation-virtual-worlds/perlin-noise-part-2/perlin-noise-terrain-mesh)
// of Perlin Noise.
float3 SimplexNoise(float u, float v, float t)
{
    float scaledX = 1.7f * u;
    float scaledY = 1.7f * v;
    float scaledZ = 0.75f * t;

    // Find unit grid cell containing point
    int X = FastFloor(scaledX);
    int Y = FastFloor(scaledY);
    int Z = FastFloor(scaledZ);

    // Get relative coords of point within cell
    float x = scaledX - X;
    float y = scaledY - Y;
    float z = scaledZ - Z;

    // Wrap unit grid cell at 255
    X &= 255;
    Y &= 255;
    Z &= 255;

    // Calculate 8 hashed gradient indices
    uint gi000 = (uint)_NoisePerm[X + _NoisePerm[Y + _NoisePerm[Z]]] % 12;
    uint gi001 = (uint)_NoisePerm[X + _NoisePerm[Y + _NoisePerm[Z + 1]]] % 12;
    uint gi010 = (uint)_NoisePerm[X + _NoisePerm[Y + 1 + _NoisePerm[Z]]] % 12;
    uint gi011 = (uint)_NoisePerm[X + _NoisePerm[Y + 1 + _NoisePerm[Z + 1]]] % 12;
    uint gi100 = (uint)_NoisePerm[X + 1 + _NoisePerm[Y + _NoisePerm[Z]]] % 12;
    uint gi101 = (uint)_NoisePerm[X + 1 + _NoisePerm[Y + _NoisePerm[Z + 1]]] % 12;
    uint gi110 = (uint)_NoisePerm[X + 1 + _NoisePerm[Y + 1 + _NoisePerm[Z]]] % 12;
    uint gi111 = (uint)_NoisePerm[X + 1 + _NoisePerm[Y + 1 + _NoisePerm[Z + 1]]] % 12;

    // Calculate noise contributions from each of the 8 corners
    float n000 = DotProd(_NoiseGrad3[gi000], x, y, z);
    float n100 = DotProd(_NoiseGrad3[gi100], x - 1, y, z);
    float n010 = DotProd(_NoiseGrad3[gi010], x, y - 1, z);
    float n110 = DotProd(_NoiseGrad3[gi110], x - 1, y - 1, z);
    float n001 = DotProd(_NoiseGrad3[gi001], x, y, z - 1);
    float n101 = DotProd(_NoiseGrad3[gi101], x - 1, y, z - 1);
    float n011 = DotProd(_NoiseGrad3[gi011], x, y - 1, z - 1);
    float n111 = DotProd(_NoiseGrad3[gi111], x - 1, y - 1, z - 1);

    // Compute the fade curve value for x, y, and z
    float fadeX = Fade(x);
    float fadeY = Fade(y);
    float fadeZ = Fade(z);

    // Interpolate along x the contributions from each of the corners
    float nx00 = Lerp(n000, n100, fadeX);
    float nx01 = Lerp(n001, n101, fadeX);
    float nx10 = Lerp(n010, n110, fadeX);
    float nx11 = Lerp(n011, n111, fadeX);
    // Interpolate the results along y
    float nxy0 = Lerp(nx00, nx10, fadeY);
    float nxy1 = Lerp(nx01, nx11, fadeY);
    // Interpolate the results along z
    float nxyz = Lerp(nxy0, nxy1, fadeZ);
    
    return float3(u, 0.75 * nxyz, v);
}

float3 Ripple(float u, float v, float t)
{
    float d = sqrt(u * u + v * v);
    float3 p;
    p.x = u;
    p.y = sin(PI * (4 * d - t)) / (2 + 10 * d);
    p.z = v;
    return p;
}

float3 Sphere(float u, float v, float t)
{
    float3 p;
    float r = 0.5 + 0.5 * sin(PI * t);
    float s = r * cos(0.5 * PI * v);
    p.x = s * sin(PI * u);
    p.y = r * sin(0.5 * PI * v);
    p.z = s * cos(PI * u);
    return p;
}

float3 BandedSphere(float u, float v, float t)
{
    float3 p;
    float r = 0.9 + 0.1 * sin(PI * (6 * u + 4 * v + t));
    float s = r * cos(0.5 * PI * v);
    p.x = s * sin(PI * u);
    p.y = r * sin(0.5 * PI * v);
    p.z = s * cos(PI * u);
    return p;
}

float3 BandedStarTorus(float u, float v, float t)
{
    float3 p;
    float r1 = 0.7 + 0.1 * sin(PI * (6 * u + 0.5 * t));
    float r2 = 0.15 + 0.05 * sin(PI * (8 * u + 4 * v + 2 * t));
    float s = r1 + r2 * cos(PI * v);
    p.x = s * sin(PI * u);
    p.y = r2 * sin(PI * v);
    p.z = s * cos(PI * u);
    return p;
}

/*************************************************
 * Kernels
 ************************************************/

#pragma kernel Kernel_SineWave
#pragma kernel Kernel_SineWave_To_MultiSineWave
#pragma kernel Kernel_SineWave_To_SimplexNoise
#pragma kernel Kernel_SineWave_To_Ripple
#pragma kernel Kernel_SineWave_To_Sphere
#pragma kernel Kernel_SineWave_To_BandedSphere
#pragma kernel Kernel_SineWave_To_BandedStarTorus

#pragma kernel Kernel_MultiSineWave_To_SineWave
#pragma kernel Kernel_MultiSineWave
#pragma kernel Kernel_MultiSineWave_To_SimplexNoise
#pragma kernel Kernel_MultiSineWave_To_Ripple
#pragma kernel Kernel_MultiSineWave_To_Sphere
#pragma kernel Kernel_MultiSineWave_To_BandedSphere
#pragma kernel Kernel_MultiSineWave_To_BandedStarTorus

#pragma kernel Kernel_SimplexNoise_To_SineWave
#pragma kernel Kernel_SimplexNoise_To_MultiSineWave
#pragma kernel Kernel_SimplexNoise
#pragma kernel Kernel_SimplexNoise_To_Ripple
#pragma kernel Kernel_SimplexNoise_To_Sphere
#pragma kernel Kernel_SimplexNoise_To_BandedSphere
#pragma kernel Kernel_SimplexNoise_To_BandedStarTorus

#pragma kernel Kernel_Ripple_To_SineWave
#pragma kernel Kernel_Ripple_To_MultiSineWave
#pragma kernel Kernel_Ripple_To_SimplexNoise
#pragma kernel Kernel_Ripple
#pragma kernel Kernel_Ripple_To_Sphere
#pragma kernel Kernel_Ripple_To_BandedSphere
#pragma kernel Kernel_Ripple_To_BandedStarTorus

#pragma kernel Kernel_Sphere_To_SineWave
#pragma kernel Kernel_Sphere_To_MultiSineWave
#pragma kernel Kernel_Sphere_To_SimplexNoise
#pragma kernel Kernel_Sphere_To_Ripple
#pragma kernel Kernel_Sphere
#pragma kernel Kernel_Sphere_To_BandedSphere
#pragma kernel Kernel_Sphere_To_BandedStarTorus

#pragma kernel Kernel_BandedSphere_To_SineWave
#pragma kernel Kernel_BandedSphere_To_MultiSineWave
#pragma kernel Kernel_BandedSphere_To_SimplexNoise
#pragma kernel Kernel_BandedSphere_To_Ripple
#pragma kernel Kernel_BandedSphere_To_Sphere
#pragma kernel Kernel_BandedSphere
#pragma kernel Kernel_BandedSphere_To_BandedStarTorus

#pragma kernel Kernel_BandedStarTorus_To_SineWave
#pragma kernel Kernel_BandedStarTorus_To_MultiSineWave
#pragma kernel Kernel_BandedStarTorus_To_SimplexNoise
#pragma kernel Kernel_BandedStarTorus_To_Ripple
#pragma kernel Kernel_BandedStarTorus_To_Sphere
#pragma kernel Kernel_BandedStarTorus_To_BandedSphere
#pragma kernel Kernel_BandedStarTorus

#define KERNEL(func) \
    [numthreads(8, 8, 1)] \
    void Kernel_##func(uint3 id : SV_DispatchThreadID) \
    { \
        float2 uv = GetUV(id); \
        SetPosition(id, func(uv.x, uv.y, _Time)); \
    }

#define KERNEL_A2B(funcA, funcB) \
    [numthreads(8, 8, 1)] \
    void Kernel_##funcA##_To_##funcB(uint3 id : SV_DispatchThreadID) \
    { \
        float2 uv = GetUV(id); \
        float3 posA = funcA(uv.x, uv.y, _Time); \
        float3 posB = funcB(uv.x, uv.y, _Time); \
        SetPosition(id, lerp(posA, posB, _TransitionProgress)); \
    }

KERNEL(SineWave)
KERNEL(MultiSineWave)
KERNEL(SimplexNoise)
KERNEL(Ripple)
KERNEL(Sphere)
KERNEL(BandedSphere)
KERNEL(BandedStarTorus)

KERNEL_A2B(SineWave, MultiSineWave)
KERNEL_A2B(SineWave, SimplexNoise)
KERNEL_A2B(SineWave, Ripple)
KERNEL_A2B(SineWave, Sphere)
KERNEL_A2B(SineWave, BandedSphere)
KERNEL_A2B(SineWave, BandedStarTorus)

KERNEL_A2B(MultiSineWave, SineWave)
KERNEL_A2B(MultiSineWave, SimplexNoise)
KERNEL_A2B(MultiSineWave, Ripple)
KERNEL_A2B(MultiSineWave, Sphere)
KERNEL_A2B(MultiSineWave, BandedSphere)
KERNEL_A2B(MultiSineWave, BandedStarTorus)

KERNEL_A2B(SimplexNoise, SineWave)
KERNEL_A2B(SimplexNoise, MultiSineWave)
KERNEL_A2B(SimplexNoise, Ripple)
KERNEL_A2B(SimplexNoise, Sphere)
KERNEL_A2B(SimplexNoise, BandedSphere)
KERNEL_A2B(SimplexNoise, BandedStarTorus)

KERNEL_A2B(Ripple, SineWave)
KERNEL_A2B(Ripple, MultiSineWave)
KERNEL_A2B(Ripple, SimplexNoise)
KERNEL_A2B(Ripple, Sphere)
KERNEL_A2B(Ripple, BandedSphere)
KERNEL_A2B(Ripple, BandedStarTorus)

KERNEL_A2B(Sphere, SineWave)
KERNEL_A2B(Sphere, MultiSineWave)
KERNEL_A2B(Sphere, SimplexNoise)
KERNEL_A2B(Sphere, Ripple)
KERNEL_A2B(Sphere, BandedSphere)
KERNEL_A2B(Sphere, BandedStarTorus)

KERNEL_A2B(BandedSphere, SineWave)
KERNEL_A2B(BandedSphere, MultiSineWave)
KERNEL_A2B(BandedSphere, SimplexNoise)
KERNEL_A2B(BandedSphere, Ripple)
KERNEL_A2B(BandedSphere, Sphere)
KERNEL_A2B(BandedSphere, BandedStarTorus)

KERNEL_A2B(BandedStarTorus, SineWave)
KERNEL_A2B(BandedStarTorus, MultiSineWave)
KERNEL_A2B(BandedStarTorus, SimplexNoise)
KERNEL_A2B(BandedStarTorus, Ripple)
KERNEL_A2B(BandedStarTorus, Sphere)
KERNEL_A2B(BandedStarTorus, BandedSphere)
